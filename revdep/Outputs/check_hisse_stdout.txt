* using log directory '/userdata/kingaa/projects/Rpkg/subplex/revdep/hisse.Rcheck'
* using R version 4.4.1 (2024-06-14)
* using platform: x86_64-pc-linux-gnu
* R was compiled by
    gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    GNU Fortran (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
* running under: Ubuntu 22.04.4 LTS
* using session charset: UTF-8
* using option '--as-cran'
* checking for file 'hisse/DESCRIPTION' ... OK
* this is package 'hisse' version '2.1.11'
* checking package namespace information ... OK
* checking package dependencies ... OK
* checking if this is a source package ... OK
* checking if there is a namespace ... OK
* checking for executable files ... OK
* checking for hidden files and directories ... OK
* checking for portable file names ... OK
* checking for sufficient/correct file permissions ... OK
* checking serialization versions ... OK
* checking whether package 'hisse' can be installed ... [67s/43s] OK
* used C compiler: 'gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0'
* checking installed package size ... OK
* checking package directory ... OK
* checking for future file timestamps ... OK
* checking 'build' directory ... OK
* checking DESCRIPTION meta-information ... OK
* checking top-level files ... OK
* checking for left-over files ... OK
* checking index information ... OK
* checking package subdirectories ... OK
* checking code files for non-ASCII characters ... OK
* checking R files for syntax errors ... OK
* checking whether the package can be loaded ... OK
* checking whether the package can be loaded with stated dependencies ... OK
* checking whether the package can be unloaded cleanly ... OK
* checking whether the namespace can be loaded with stated dependencies ... OK
* checking whether the namespace can be unloaded cleanly ... OK
* checking loading without being on the library search path ... OK
* checking use of S3 registration ... OK
* checking dependencies in R code ... OK
* checking S3 generic/method consistency ... OK
* checking replacement functions ... OK
* checking foreign function calls ... OK
* checking R code for possible problems ... [104s/71s] NOTE
AdaptiveConfidenceIntervalSampling.old: local variable ‘actual.params’
  assigned but may not be used
AdaptiveConfidenceIntervalSamplingGeoHiSSE: local variable
  ‘actual.params’ assigned but may not be used
AdaptiveConfidenceIntervalSamplingGeoHiSSE.old: local variable
  ‘actual.params’ assigned but may not be used
AdaptiveConfidenceIntervalSamplingMiSSE: local variable ‘actual.params’
  assigned but may not be used
AdaptiveConfidenceIntervalSamplingMuHiSSE: local variable
  ‘actual.params’ assigned but may not be used
AdaptiveConfidenceIntervalSamplingfHiSSE: local variable
  ‘actual.params’ assigned but may not be used
AddKNodes: local variable ‘ntip’ assigned but may not be used
DownPass: local variable ‘TIPS’ assigned but may not be used
DownPassGeoHisse: local variable ‘TIPS’ assigned but may not be used
DownPassGeoHissefast: local variable ‘compE’ assigned but may not be
  used
DownPassGeoHissefast: local variable ‘nb.node’ assigned but may not be
  used
DownPassHiSSE: local variable ‘.’ assigned but may not be used
DownPassHiSSE: local variable ‘compE’ assigned but may not be used
DownPassMisse: local variable ‘.’ assigned but may not be used
DownPassMisse: local variable ‘compE’ assigned but may not be used
DownPassMuHisse: local variable ‘.’ assigned but may not be used
DownPassMuHisse: local variable ‘compE’ assigned but may not be used
DownPassMusse: local variable ‘TIPS’ assigned but may not be used
DownPassNull: local variable ‘TIPS’ assigned but may not be used
GeoHiSSE: local variable ‘category.rates.unique’ assigned but may not
  be used
GeoHiSSE.old: local variable ‘category.rates.unique’ assigned but may
  not be used
GetEdgeCombined: local variable ‘extinct_taxa_indices’ assigned but may
  not be used
GetEdgeDetails: local variable ‘tipwards_nodes_of_rootwards_nodes’
  assigned but may not be used
GetRootProb: local variable ‘.’ assigned but may not be used
GetRootProbGeo: local variable ‘.’ assigned but may not be used
GetRootProbHiSSE: local variable ‘.’ assigned but may not be used
GetTreeTable: local variable ‘max.age’ assigned but may not be used
MarginRecon.old: local variable ‘nodes’ assigned but may not be used
MarginReconGeoSSE: local variable ‘nstates’ assigned but may not be
  used
MarginReconGeoSSE.old: local variable ‘nodes’ assigned but may not be
  used
MarginReconHiSSE: local variable ‘nstates’ assigned but may not be used
MarginReconMiSSE: local variable ‘nstates’ assigned but may not be used
MarginReconMuHiSSE: local variable ‘nstates’ assigned but may not be
  used
MuHiSSE: local variable ‘category.rates.unique’ assigned but may not be
  used
MuHiSSE: local variable ‘sann.counts’ assigned but may not be used
OrganizeData: local variable ‘nb.node’ assigned but may not be used
OrganizeDataGeo: local variable ‘nb.node’ assigned but may not be used
OrganizeDataHiSSE: local variable ‘cols’ assigned but may not be used
OrganizeDataHiSSE: local variable ‘nb.node’ assigned but may not be
  used
OrganizeDataMiSSE: local variable ‘nb.node’ assigned but may not be
  used
RerunBadOptim: local variable ‘current.fit’ assigned but may not be
  used
SupportRegion.old: local variable ‘free.parameters’ assigned but may
  not be used
SupportRegionGeoSSE: local variable ‘free.parameters’ assigned but may
  not be used
SupportRegionGeoSSE.old: local variable ‘free.parameters’ assigned but
  may not be used
SupportRegionHiSSE: local variable ‘free.parameters’ assigned but may
  not be used
SupportRegionMiSSE: local variable ‘free.parameters’ assigned but may
  not be used
SupportRegionMuHiSSE: local variable ‘free.parameters’ assigned but may
  not be used
hisse: local variable ‘category.rates.unique’ assigned but may not be
  used
makeGeoHiSSELikelihood: local variable ‘category.rates.unique’ assigned
  but may not be used
makeHiSSELikelihood: local variable ‘pars.full’ assigned but may not be
  used
makeHiSSELikelihood: local variable ‘samp.freq.tree’ assigned but may
  not be used
plot.contMapHisse: local variable ‘H’ assigned but may not be used
plot.contMapHisse: local variable ‘N’ assigned but may not be used
plot.contMapHisse: local variable ‘set.null’ assigned but may not be
  used
plotFanHiSSE: local variable ‘ptreeB’ assigned but may not be used
plotPhylogramHiSSE: local variable ‘ptreeB’ assigned but may not be
  used
plotSimmapHiSSE: local variable ‘set.null’ assigned but may not be used
* checking Rd files ... NOTE
checkRd: (-1) generateMiSSEGreedyCombinations.Rd:25: Lost braces
    25 | Estimating extinction rates is hard. This affects all diversification models (even if all you want and look at is speciation rate, extinction rate estimates still affect what this is as they affect the likelihood). It is most noticeable in MiSSE with eps, the extinction fraction (extinction rate divided by speciation rate). One option, following Magallon & Sanderson (2001), is to set extinction fraction at set values. By default, we use theirs, 0 (meaning a Yule model - no extinction) or 0.9 (a lot of extinction, though still less than paleontoligists find). You can set your own in \code{fixed.eps.tries}. If you only want to use fixed values, and not estimate, get rid of the NA, as well. However, don't \dQuote{cheat} -- if you use a range of values for fixed.eps, it's basically doing a search for this, though the default AICc calculation doesn't dQuote{know} this to penalize it for another parameter.
       |
checkRd: (-1) generateMiSSEGreedyCombinations.Rd:27: Lost braces
    27 | HiSSE and thus MiSSE assume that a taxon has a particular hidden state (though they recognize that there can be uncertainty in which state it actually has). Thus, they're written to assume that we dQuote{paint} these states on the tree and a given state affects both turnover and eps. So if turnover has four hidden states, eps has four hidden states. They can be constrained: the easiest way is to have, say, turnover having an independent rate for each hidden state and eps having the same rate for all the hidden states. If \code{vary.both} is set to FALSE, all models are of this sort: if turnover varies, eps is constant across all hidden states, or vice versa. Jeremy Beaulieu prefers this. If \code{vary.both} is set to TRUE, both can vary: for example, there could be five hidden states for both turnover and eps, but turnover lets each of these have a different rate, but eps only allows three values (so that eps_A and eps_D might be forced to be equal, and eps_B and eps_E might be forced to be equal). Brian O'Meara would consider allowing this, while cautioning you about the risks of too many parameters.
       |                                                                                                                                                                                                            ^
* checking Rd metadata ... OK
* checking Rd line widths ... OK
* checking Rd cross-references ... OK
* checking for missing documentation entries ... OK
* checking for code/documentation mismatches ... OK
* checking Rd \usage sections ... OK
* checking Rd contents ... OK
* checking for unstated dependencies in examples ... OK
* checking line endings in C/C++/Fortran sources/headers ... OK
* checking line endings in Makefiles ... OK
* checking compilation flags in Makevars ... OK
* checking for GNU extensions in Makefiles ... OK
* checking for portable use of $(BLAS_LIBS) and $(LAPACK_LIBS) ... OK
* checking use of PKG_*FLAGS in Makefiles ... OK
* checking use of SHLIB_OPENMP_*FLAGS in Makefiles ... OK
* checking pragmas in C/C++ headers and code ... OK
* checking compilation flags used ... OK
* checking compiled code ... OK
* checking sizes of PDF files under 'inst/doc' ... OK
* checking installed files from 'inst/doc' ... OK
* checking files in 'vignettes' ... OK
* checking examples ... OK
** found \donttest examples: check also with --run-donttest
* checking for unstated dependencies in 'tests' ... OK
* checking tests ...
 OK
* checking for unstated dependencies in vignettes ... OK
* checking package vignettes ... OK
* checking re-building of vignette outputs ... [126s/94s] OK
* checking PDF version of manual ... OK
* checking HTML version of manual ... OK
* checking for non-standard things in the check directory ... OK
* checking for detritus in the temp directory ... OK
* DONE
Status: 2 NOTEs
